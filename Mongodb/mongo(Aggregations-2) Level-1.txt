mongo(Aggregations-2) Level-1


1. Write Mongo query to retrieve the unique citye's from the buyers address as "\_id".
Ans:- db.buyers.aggregate([{$group :{_id :"$address.city"}}])


2. Write Mongo query to retrieve the unique zip from the buyers address as "\_id".
Ans:- db.buyers.aggregate([{$group :{_id :"$address.zip"}}])


3. Write Mongo query to retrieve the unique order_id in ascending order from the order_details.
Ans:- db.getCollection('order-details').aggregate([{$group :{_id :"$order_id"}}, {$sort :{_id :1}}])


4. Write Mongo query to retrieve the unique customer_id from the orders.
Ans:- db.orders.aggregate([{$group :{_id :"$customer_id"}}])


5. Write Mongo query to retrieve the unique paymentMethod's from the payments collection as "\_id".
Ans:- db.payments.aggregate([{$group :{_id :"$paymentMethod"}}])


6. Write Mongo query to retrieve the unique paymentstatus's from the payments collection as "\_id".
Ans:- db.payments.aggregate([{$group :{_id :"$paymentstatus"}}])


7. Write Mongo query to retrieve the unique category_id product from products.
Ans:- db.products.aggregate([{$group :{_id :"$category_id"}}])


 8. Write a MongoDB query to aggregate the total sales per customer and list the top 5 customers by total sales amount. Include the customer's ID and their total sales in the output.
Ans:- db.orders.aggregate([{$group : {_id : "$customer_id" , total : {$sum : "$total"}}}, {$sort :{total :-1}}, {$limit :5}])



 9. Aggregate the orders to count how many there are per status and show only the first 3 statuses based on the aggregated count.
Ans:- db.orders.aggregate([ { $group: { _id: "$status", count: { $sum: 1 } } }, { $sort: { count: -1 } }, { $limit: 3 }] )


 10. Write a MongoDB query to calculate the total amount of payments that have a success status.
Ans:- db.payments.aggregate([{$match:{paymentstatus:"success"}},{$group:{_id:1, total:{$sum:"$amount"}}}])



 